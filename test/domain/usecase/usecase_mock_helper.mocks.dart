// Mocks generated by Mockito 5.4.4 from annotations
// in bookfinder/test/domain/usecase/usecase_mock_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:bookfinder/domain/core/failure.dart' as _i5;
import 'package:bookfinder/domain/entities/book_details_entity.dart' as _i7;
import 'package:bookfinder/domain/entities/book_entity.dart' as _i6;
import 'package:bookfinder/domain/repositories/book_library_repository.dart'
    as _i3;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [BookLibraryRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockBookLibraryRepository extends _i1.Mock
    implements _i3.BookLibraryRepository {
  MockBookLibraryRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.BookEntity>>> searchBooks(
    String? query,
    String? fields,
    int? page,
    int? limit,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchBooks,
          [
            query,
            fields,
            page,
            limit,
          ],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.BookEntity>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.BookEntity>>(
          this,
          Invocation.method(
            #searchBooks,
            [
              query,
              fields,
              page,
              limit,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.BookEntity>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i7.BookDetailEntity>> fetchBookDetails(
          String? olid) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchBookDetails,
          [olid],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i7.BookDetailEntity>>.value(
                _FakeEither_0<_i5.Failure, _i7.BookDetailEntity>(
          this,
          Invocation.method(
            #fetchBookDetails,
            [olid],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i7.BookDetailEntity>>);

  @override
  _i4.Future<void> insertBookDetailsToDB(_i7.BookDetailEntity? bookDetails) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertBookDetailsToDB,
          [bookDetails],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i7.BookDetailEntity?> getBookDetailsFromDB(String? olid) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBookDetailsFromDB,
          [olid],
        ),
        returnValue: _i4.Future<_i7.BookDetailEntity?>.value(),
      ) as _i4.Future<_i7.BookDetailEntity?>);
}
